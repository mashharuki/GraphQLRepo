scalar DateTime
scalar Upload

type Photo {
  id: ID!
  url: String!
  name: String!
  description: String
  category: PhotoCategory!
  postedBy: User!
  taggedUsers: [User!]!
  created: DateTime!
}

type User {
  githubLogin: ID!
  name: String
  avatar: String
  postedPhotos: [Photo!]!
  inPhotos: [Photo!]!
}

type Subscription {
  newPhoto: Photo!
  newUser: User!
}

"""
A Custom type for Auth Object
"""
type AuthPayload {
  """
  A jwt token returned after a successful auth
  """
  token: String!
  """
  A user that was authenticated
  """
  user: User!
}

enum PhotoCategory {
  SELFIE
  PORTRAIT
  ACTION
  LANDSCAPE
  GRAPHIC
}

input PostPhotoInput {
  name: String!
  description: String
  category: PhotoCategory = PORTRAIT
  file: Upload!
}

"""
A root type showing all the queries (READ)
"""
type Query {
  """
  A query that return the authenticated user from a token
  """
  me: User
  """
  A query that returns the total number of photos
  """
  totalPhotos: Int!
  """
  A query that returns all the photos
  """
  allPhotos: [Photo!]!
  """
  A query that returns the total number of users
  """
  totalUsers: Int!
  """
  A query that returns all the users
  """
  allUsers: [User!]!
}

type Mutation {
  """
  A mutation to post a new photo
  """
  postPhoto(input: PostPhotoInput!): Photo!

  """
  A mutation to Authenticate a Github user
  """
  githubAuth(
    """
    A password or GitHub token
    """
    code: String!
  ): AuthPayload!

  """
  A mutation to add fake(mocked) users
  """
  addFakeUsers(count: Int = 1): [User!]!

  """
  A mutation to authenticate a fake user
  """
  fakeUserAuth(githubLogin: ID!): AuthPayload!
}
